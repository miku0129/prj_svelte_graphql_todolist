{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Todo.svelte",
    "../Todo.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import ApolloClient from \"apollo-boost\";\n  import { setClient } from \"svelte-apollo\";\n  import Todo from \"./components/Todo.svelte\";\n\n  export let appTitle;\n\n  const client = new ApolloClient({\n    uri: \"http://localhost:5050/graphql\",\n\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log(\"graphQLErrors\", graphQLErrors);\n      console.log(\"networkError\", networkError);\n    }\n  });\n\n  setClient(client);\n</script>\n\n\n<h5>{appTitle}</h5>\n<div class=\"centrify\">\n  <Todo />\n</div>\n\n  <style>\n    .centrify {\n      text-align: center;\n    }\n  </style>\n",
    "<script>\n  import { getClient, query, mutate } from \"svelte-apollo\";\n  import {GETTODO, ADDTODO } from \"\"\n\n  let todoEdit = \"\";\n  const client = getClient();\n  const todoOp = query(client, { query: GETTODO });\n\n  function addTodo() {\n    const todoAdd = mutate(client, {\n      mutation: ADDTODO,\n      variables: {\n        todoEdit\n      }\n    })\n      .then(data => {\n        todoEdit = \"\";\n        todoOp.refetch();\n      })\n      .catch(e => {\n        console.error(\"error: \", e);\n      });\n  }\n//リストのボタンをクリックでリスト削除/リストアップを操作できる\n</script>\n\n<div>\n  <h2>Todos</h2>\n  <form on:submit|preventDefault={addTodo}>\n    <input placeholder=\"new todo\" bind:value={todoEdit} />\n    <button method=\"submit\">Submit</button>\n  </form>\n\n  {#await $todoOp}\n    <p>.. loading</p>\n  {:then data}\n\n    {#each data.data['allTodos']['nodes'] as todo, i}\n      <p class:done={todo.done}>{todo.title}</p>\n    {/each}\n  {:catch e}\n    {e}\n  {/await}\n</div>\n\n<style>\n  .done {\n    text-decoration: line-through;\n  }\n</style>\n\n",
    "<script>\n  import { getClient, query, mutate } from \"svelte-apollo\";\n  import {GETTODO, ADDTODO, DELETETODO } from \"./../utils/index.js\"\n\n  let todoEdit = \"\";\n  const client = getClient();\n  const todoOp = query(client, { query: GETTODO });\n\n  function addTodo() {\n    const todoAdd = mutate(client, {\n      mutation: ADDTODO,\n      variables: {\n        todoEdit\n      }\n    })\n      .then(data => {\n        todoEdit = \"\";\n        todoOp.refetch();\n      })\n      .catch(e => {\n        console.error(\"error: \", e);\n      });\n  }\n  function deleteTodo(id){\n    mutate(client, {mutation: DELETETODO, \n      variables: {\n        id\n      }\n    })\n    .then(data => {\n        todoEdit = \"\";\n        todoOp.refetch();\n      })\n      .catch(e => {\n        console.error(\"error: \", e);\n      });\n  }\n//リストのボタンをクリックでリスト削除/リストアップを操作できる\n</script>\n\n<div class=\"todos-container\">\n  <h2>Todos</h2>\n  <form on:submit|preventDefault={addTodo}>\n    <input placeholder=\"new todo\" bind:value={todoEdit} />\n    <button method=\"submit\">Submit</button>\n  </form>\n\n  {#await $todoOp}\n    <p>.. loading</p>\n  {:then data}\n\n    {#each data.data['allTodos']['nodes'] as todo, i}\n    <div class=\"todo-container\">\n      <p class:done={todo.done}>{todo.title}</p>\n      <button on:click={()=> {deleteTodo(todo.id)}}>delete</button>\n    </div>\n    {/each}\n  {:catch e}\n    {e}\n  {/await}\n</div>\n\n<style>\n  button{\n    cursor: pointer;\n  }\n  .todos-container{\n    text-align: center;\n  }\n  .todos-container > form {\n    margin-bottom: 30px;\n  }\n  .todos-container > .todo-container {\n    display: flex;\n    gap: 10px;\n    justify-content: center;\n  }\n  .done {\n    text-decoration: line-through;\n  }\n</style>\n\n"
  ],
  "names": [],
  "mappings": "AA0BI,wBAAU,CACR,UAAU,CAAE,MACd;ACkBF,mBAAM,CACJ,eAAe,CAAE,YACnB;ACeA,oCAAM,CACJ,MAAM,CAAE,OACV,CACA,8CAAgB,CACd,UAAU,CAAE,MACd,CACA,+BAAgB,CAAG,mBAAK,CACtB,aAAa,CAAE,IACjB,CACA,+BAAgB,CAAG,8BAAgB,CACjC,OAAO,CAAE,IAAI,CACb,GAAG,CAAE,IAAI,CACT,eAAe,CAAE,MACnB,CACA,mCAAM,CACJ,eAAe,CAAE,YACnB"
}