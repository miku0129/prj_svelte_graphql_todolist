{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Todo.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import ApolloClient from \"apollo-boost\";\n  import { setClient } from \"svelte-apollo\";\n  import Todo from \"./Todo.svelte\";\n\n  export let appTitle;\n\n  const client = new ApolloClient({\n    uri: \"http://localhost:5050/graphql\",\n\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log(\"graphQLErrors\", graphQLErrors);\n      console.log(\"networkError\", networkError);\n    }\n  });\n\n  setClient(client);\n</script>\n\n\n<h5>{appTitle}</h5>\n<div class=\"centrify\">\n  <Todo />\n</div>\n\n  <style>\n    .centrify {\n      text-align: center;\n    }\n  </style>\n",
    "<script>\n  import { getClient, query, mutate } from \"svelte-apollo\";\n  import { gql } from \"apollo-boost\";\n\n  const GETTODO = gql`\n    {\n      allTodos {\n        nodes {\n          id\n          title\n          done\n        }\n      }\n    }\n  `;\n\n  const ADDTODO = gql`\n    mutation($todoEdit: String!) {\n      createTodo(input: { todo: { title: $todoEdit, done: false } }) {\n        todo {\n          title\n          done\n        }\n      }\n    }\n  `;\n\n  let todoEdit = \"\";\n  const client = getClient();\n  const todoOp = query(client, { query: GETTODO });\n\n  function addTodo() {\n    const todoAdd = mutate(client, {\n      mutation: ADDTODO,\n      variables: {\n        todoEdit\n      }\n    })\n      .then(data => {\n        todoEdit = \"\";\n        todoOp.refetch();\n      })\n      .catch(e => {\n        console.error(\"error: \", e);\n      });\n  }\n//リストのボタンをクリックでリスト削除/リストアップを操作できる\n</script>\n\n<div>\n  <h2>Todos</h2>\n  <form on:submit|preventDefault={addTodo}>\n    <input placeholder=\"new todo\" bind:value={todoEdit} />\n    <button method=\"submit\">Submit</button>\n  </form>\n\n  {#await $todoOp}\n    <p>.. loading</p>\n  {:then data}\n\n    {#each data.data['allTodos']['nodes'] as todo, i}\n      <p class:done={todo.done}>{todo.title}</p>\n    {/each}\n  {:catch e}\n    {e}\n  {/await}\n</div>\n\n<style>\n  .done {\n    text-decoration: line-through;\n  }\n</style>\n\n"
  ],
  "names": [],
  "mappings": "AA0BI,wBAAU,CACR,UAAU,CAAE,MACd;ACyCF,mBAAM,CACJ,eAAe,CAAE,YACnB"
}